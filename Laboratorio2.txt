%-----------------------------------Imagenes de prueba-----------------------------------
/* 
pixbit( 0, 0, 1, 10, PA), pixbit( 0, 1, 0, 20, PB), pixbit( 1, 0, 0, 30, PC), pixbit( 1, 1, 1, 4, PD), image("#FFFFFF", 2, 2, [PA, PB, PC, PD], I)
pixhex(0, 0,"asdf",1,PA), pixhex(0, 1, "asddf", 20, PB), pixhex(1, 0,"adsf",30,PC), pixhex(1, 1,"hgda",50, PD), image("", 2, 2, [PA, PB, PC, PD], I)
pixrgb( 0, 0, 10, 10, 10, 10, PA), pixrgb( 0, 1, 20, 20, 20, 20, PB), pixrgb( 1, 0, 30, 30, 30, 30, PC), pixrgb( 1, 1, 40, 40, 40, 40, PD), image("", 2, 2, [PA, PB, PC, PD], I)
*/



%-----------------------------------Constructores-----------------------------------

%pixbit-d
%Entrada: Posicion x, Posicion y, Bit, profundidad
%Salida: [Posicion x, Posicion y, Bit, profundidad]

pixbit(X,Y,Bit,D,[X,Y,Bit,D]):-
    integer(X),
    integer(Y),
    Bit = 0 ; Bit = 1,
    integer(D).


%pixrgb
% Dominio: Posicion x(int) , Posicion y(int) , Canal R(int) , Canal G(int) , Canal B(int) ,profundidad
%Recorrido: [Posicion x, Posicion y, Canal R, Canal G, Canal B, profundidad]

pixrgb(X,Y,R,G,B,D,[X,Y,[R,G,B],D]):-
    integer(X),
    integer(Y),
    between(0,255,R),
    between(0,255,G),
    between(0,255,B),
    integer(D).

%pixbit-d
%Entrada: Posicion x, Posicion y, Hex, profundidad
%Salida: [Posicion x, Posicion y, Hex, profundidad]

pixhex(X,Y,Hex,D,[X,Y,Hex,D]):-
    integer(X),
    integer(Y),
    string(Hex),
    integer(D).

%2) Image
%Entrada: "Color_Comprimido", Ancho, Alto, [Lista de pixeles]
%Salida: [Color_Comprimido,Ancho,Alto,[Lista de pixeles]]

image(Color_Comprimido,Ancho,Alto,[H|T], [Color_Comprimido,Ancho,Alto,[H|T]]):-
    integer(Ancho),
    integer(Alto).
%-----------------------------------Selectores-----------------------------------
getHead([H|_], H).
getSecond([_,S|_],S).
getAlto([_,Alto,_,_], Alto).
getAncho([_,_,Ancho,_],Ancho).
getColor_Compresed([Color|_],Color).
getPixels([_,_,_,[H|T]], [H|T]).


getx([X|_], X).
gety([_,Y|_], Y).

getColor([_,_,Color,_],Color).
getR([_,_,[R,_,_],_] , R). %entrada: pixel
getG([_,_,[_,G,_],_] , G).
getB([_,_,[_,_,B],_] , B).
getD([_,_,_,D],D).%entrada: Pixel

%-----------------------------------Modificadores-----------------------------------
setAlto([Color,_,Ancho,[H|T]], NewAlto, [Color,NewAlto,Ancho,[H|T]]):-
    integer(NewAlto).
setAncho([Color,Alto,_,[H|T]], NewAncho, [Color,Alto,NewAncho,[H|T]]):-
    integer(NewAncho).
setColor_Compressed([_,Alto,Ancho,[H|T]],NewColor, [NewColor,Alto,Ancho,[H|T]]).

setPixels([Color,Alto,Ancho,_], [NewH|NewT], [Color,Alto,Ancho,[NewH|NewT]]).
          

setx([_|T], NewX, [NewX|T]):-
    integer(NewX).
sety([X,_|T], NewY, [X,NewY|T]):-
    integer(NewY).
setbit([X,Y,_,D], NewBit, [X,Y,NewBit,D]):-
    NewBit = 0 ; NewBit = 1.
sethex([X,Y,_,D], NewHex, [X,Y,NewHex,D]):-
    string(NewHex).
setrgb([X,Y,[_,_,_],D],NewR,NewG,NewB, [X,Y,[NewR,NewG,NewB],D]).

setdD([X,Y,Color,_],NewD, [X,Y,Color,NewD]):-
    integer(NewD).

%-----------------------------------Funciones----------------------------------
%3)imageIsBitmap
%Dominio: image
%Recorrido: boolean
imageIsBitmap([_,_,_,[H|_]]) :-
    pixbit(_,_,_,_, H ).


%4)imageIsPixmap
%Dominio: image
%Recorrido: boolean
imageIsPixmap([_,_,_,[H|_]]) :-
    pixrgb(_,_,_,_,_,_, H ).

%5)imageIsHexmap
%Dominio: image
%Recorrido: boolean
imageIsHexmap([_,_,_,[H|_]]) :-
    pixrgb(_,_,_,_, H ).

%6)imageIsCompressed
%Dominio: Image
%Recorrido: Boolean
%Descripcion: Como se define en el Tda imagen que el primer elemento es el string
%del color comprimido, si el string es vacío significa es no ha sido comprimida.

imageIsCompressed([Color|_]):-
                  Color \= "" .

%7) imageFlipH
%Dominio: Imagen
%Recorrido: Imagen
%imagenFlipH([Color,Alto,Ancho,[H|T]], [Color,Alto,Ancho,[H|T]]):-
 

imageFlipH([Color,Alto,Ancho, Pixeles], [Color,Alto,Ancho, NewPixeles]):-
    maplist(pixelFlipH(Alto),Pixeles,NewPixeles).
                          
    
pixelFlipH(Alto, [X,Y|T] ,[X,NewY|T]):-
    NewY is (Alto-1)-Y.

%(8 imageFlipV
%Dominio: Imagen
%Recorrido: Imagen
imageFlipV([Color,Alto,Ancho, Pixeles], [Color,Alto,Ancho, NewPixeles]):-
    maplist(pixelFlipV(Ancho),Pixeles,NewPixeles).

pixelFlipV(Ancho, [X,Y|T] ,[NewX,Y|T]):-
    NewX is (Ancho-1)-X.

%(9 Crop
%Dominio: image X x1 (int) X y1 (int) X x2 (int) X y2 (int) X image

imageCrop([Color, _, _, Pixeles],X1,Y1,X2,Y2 , [Color, NewAlto, NewAncho, NewPixeles]):-
    H is X2-X1,
    abs(H,Hf),
    NewAlto is Hf + 1,
    W is Y2-Y1,
    abs(W,Wf),
    NewAncho is Wf + 1,
    
    min(X1,X2, Xmin),
    max(X1,X2, Xmax),
    min(Y1,Y2, Ymin),
    max(Y1,Y2, Ymax),
	include(dentro_de_margen(Xmin,Xmax,Ymin,Ymax),Pixeles, Pixelesfiltred),
	maplist(cambio_cords_crop(Xmin,Ymin),Pixelesfiltred,NewPixeles).
    
    
cambio_cords_crop(Xmin,Ymin,Pixelin,Pixelout):-
        getx(Pixelin,X),
        gety(Pixelin,Y),
        NewX is X-Xmin,
        NewY is Y-Ymin,
    	setx(Pixelin, NewX, P1),
    	sety(P1,NewY, Pixelout).
        
        
        
        
dentro_de_margen(Xmin,Xmax,Ymin,Ymax,Pixel):-
    getx(Pixel,X),
    gety(Pixel,Y),
    (X>=Xmin, X=<Xmax),
    (Y >= Ymin, Y =< Ymax).


    
    
min(Int1, Int2, Int3):-
    (Int1 < Int2, Int3 = Int1);
    (Int1 > Int2, Int3 = Int2);
    (Int1 = Int2, Int3 = Int2).

max(Int1, Int2, Int3):-
    (Int1 > Int2, Int3 = Int1);
    (Int1 < Int2, Int3 = Int2);
    (Int1 = Int2, Int3 = Int2).

abs(Intin, Intout):-
    (Intin >= 0, Intout = Intin);
    (Intin < 0, Intout is Intin * -1).

%10) imageRGBToHex
%Dominio:image X image

imageRGBtoHex(I, [Color, Alto, Ancho, NewPixeles]):-
    getColor_Compresed(I, Color),
    getAlto(I, Alto),
    getAncho(I, Ancho),
    getPixels(I, Pixeles),
    maplist(pixrgb_to_pixhex, Pixeles, NewPixeles).

    
pixrgb_to_pixhex(Pixelin,Pixelout):-
    
    getx(Pixelin,X),
    gety(Pixelin,Y),
    getD(Pixelin,D),
    getR(Pixelin,R),
    getG(Pixelin,G),
    getB(Pixelin,B),
    
    numtohex(R, RHex),
    numtohex(G, GHex),
    numtohex(B, BHex),
    
    string_concat('#',RHex, C1),
    string_concat(C1,GHex,C2),
    string_concat(C2,BHex,ColorHex),
    pixhex(X,Y,ColorHex,D,Pixelout).
    
numtohex(Int, Hex) :-
    Rem1 is Int//16 rem 16,
    Rem2 is Int rem 16,

    ((Rem1 <10, number_string(Rem1,Hex1)); 
    (Rem1 =10, Hex1 = 'A'); 
    (Rem1 =11, Hex1 = 'B');
    (Rem1 =12, Hex1 = 'C');
    (Rem1 =13, Hex1 = 'D');
    (Rem1 =14, Hex1 = 'E');
    (Rem1 =15, Hex1 = 'F')),

    ((Rem2<10, number_string(Rem2,Hex2));
    (Rem2=10, Hex2 = 'A');
    (Rem2=11, Hex2 = 'B');
    (Rem2=12, Hex2 = 'C');
    (Rem2=13, Hex2 = 'D');
    (Rem2=14, Hex2 = 'E');
    (Rem2=15, Hex2 = 'F')),
    string_concat(Hex1,Hex2,Hex).


isSameColor(Color,[_,_,Color,_]).

%11)imageToHistogram
%Dominio: image X histograma
imageToHistogram(Imagen, Histograma):-
    getPixels(Imagen, Pixels),
    pixel_histogram(Pixels, Histograma).




%caso base 1: cuando no hay mas pixeles, se devuelve el histograma
pixel_histogram([],[]).

%caso base 2: cuando no se ha hecho ningun histograma, es "el primer llamado"
pixel_histogram(Pixels,[]):-
     %se toma el primer pixel
    getHead(Pixels, Head_Pixel),
    
    %se toma el color del primer pixel
    getColor(Head_Pixel,ColorPixel),   
    
    %se deja en una lista solo los pixeles del mismo color
    include(isSameColor(ColorPixel),Pixels,Pixeles_mismocolor),
    
    %se saca el largo de esa lista para saber las repeticiones
    length(Pixeles_mismocolor,Repeticiones),
    
     %se deja en una nueva lista los pixeles distintos al color ya agregado
    exclude(isSameColor(ColorPixel),Pixels,NewPixeles),
    
      
    %se llama a la funcion nuevamente con  la nueva lista de pixeles y histograma con el primer color 
    pixel_histogram(NewPixeles,[Repeticiones,ColorPixel]).

%caso recursivo
pixel_histogram(Pixels,[[Repeticiones,ColorPixel]|Histograma]):-
    %se toma el primer pixel
    getHead(Pixels, Head_Pixel),
    
    %se toma el color del primer pixel
    getColor(Head_Pixel,ColorPixel),   
    
    %se deja en una lista solo los pixeles del mismo color
    include(isSameColor(ColorPixel),Pixels,Pixeles_mismocolor),
    
    %se saca el largo de esa lista para saber las repeticiones
    length(Pixeles_mismocolor,Repeticiones),
    
    
    %se deja en una lista los pixeles distintos al color ya agregado
    exclude(isSameColor(ColorPixel),Pixels,NewPixeles),
    
    %se llama a la funcion nuevamente con el nuevo histograma y la nueva lista de pixeles
    pixel_histogram(NewPixeles,Histograma).
    

%12) imageRotate90
%Dominio: Image X Image
%Descripcion: Se invierten los valores entre ancho y alto y se rota cada pixel con otra funcion

imageRotate90(ImagenIn,ImagenOut):-
    getAlto(ImagenIn,Alto),
    getAncho(ImagenIn,Ancho),
    getPixels(ImagenIn,Pixeles),
    maplist(rotatepixel(Alto),Pixeles,NewPixeles),
    setAlto(ImagenIn,Ancho,ImageMod1),
    setAncho(ImageMod1,Alto,ImageMod2),
    setPixels(ImageMod2,NewPixeles,ImagenOut).

    
%rotatepixel
%Dominio: AltoImagen X Pixel X Pixel
%Descripcion: rota la cordenada del pixel en 90 grados hacia la derecha, manteniendo los demas valores
%la nueva cordenada x es la cord y inicial, la nueva cordenada y es(AltoImagen-1)-Xinicial,

rotatepixel(AltoImagen,Pixelin,PixelOut):-
    getx(Pixelin,X),
    gety(Pixelin,Y),
    NewX is Y,
    NewY is AltoImagen - 1 - X,
    setx(Pixelin, NewX, Pixelmod),
    sety(Pixelmod, NewY, PixelOut).
    
    
   
%13) imageCompress
%Dominio: image X image
%Descripcion: comprime una imagen eliminando el color más frecuente, guardando la
%informaciion del color

imageCompress(ImageIn,ImageCompressed):-
    %se saca el histograma de la imagen
    imageToHistogram(ImageIn,Histogram),
    
    %se ordena en orden decreciente de acuerdo a la frecuenca
    sort(0,@>,Histogram, HistogramSort),
    
    %se obtiene la cabeza del histograma ordenado ordenada(el mas frecuente)
    getHead(HistogramSort,PixelMasFrecuente),
    
    %se saca el segundo elemento de el elemnto anterior(el color del mas frecuente)
    getSecond(PixelMasFrecuente,ColorFrecuente),
    
    getPixels(ImageIn, Pixeles),
    
    %se filtra la lista de pixeles iniciales, dejando los que tengan el color más frecuente
    exclude(isSameColor(ColorFrecuente),Pixeles,PixelesCompressed),
    
    %crea una nueva imagen con los pixeles filtrados
    setPixels(ImageIn,PixelesCompressed, ImageMod),
    
    %a la imagen anterior le agrega el color más frecuente para guardarlo en el tda
    setColor_Compressed(ImageMod,ColorFrecuente,ImageCompressed).
    
%isSameCord
%Dominio: CordenadaX x CordenadaY x Pixel
%Descripción: Arroja true si las cordenadas del pixel coincide con las cordenadas entregadas

isSameCord(X,Y,[X,Y,_,_]).


%14)imageChangePixel
%Dominio: Imagen x Pixel x Imagen
%Descripción: Permite remplazar un pixel de una imagen, cambiandolo por uno que tenga
%las mismas cordenadas que el pixel original


imageChangePixel(ImagenIn,PixelFinal,ImagenOut):-
    %se obtiene la lista de pixeles iniciales y las cordenadas x e y del pixel modificado
    getPixels(ImagenIn,Pixeles),
    getx(PixelFinal,X),
    gety(PixelFinal,Y),
    
    %se deja una lista sin el pixel que coincida con las cordenadas del pixel modificado
    exclude(isSameCord(X,Y),Pixeles,PixelesMod),
    
    %se agrega el pixel modificado a la lista modificada anteriormente y se crea una imagen con esta nueva lista
    append([PixelFinal],PixelesMod,Pixeles_Out),

    setPixels(ImagenIn,Pixeles_Out,ImagenOut).



invertColorRGB(PixelIn, PixelOut):-
    getR(PixelIn,R),
    getG(PixelIn,G),
    getB(PixelIn,B),
    NewR is 255 - R,
    NewG is 255 - G,
    NewB is 255 - B,
    setrgb(PixelIn,NewR,NewG,NewB,PixelOut).